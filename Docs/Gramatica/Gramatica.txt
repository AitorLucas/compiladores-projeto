<program>      → <expression> NEWLINE <program> | ε

<expression>   → ( <expr_body> )

<expr_body>    → <if_expr>
               | <for_expr>
               | <rpn_expr>
               | <mem_expr>

<rpn_expr>     →  <term> <term> <arith_op>

<mem_expr>     → MEM
               | <term> MEM
               | <term> RES

<term>         → NUMBER
               | ( <expression> )

<arith_op>     → +
               | -
               | *
               | /
               | %
               | ^
               | |

<if_expr>      → IF <cond_expr> THEN <expression> 
               | IF <cond_expr> THEN <expression> ELSE <expression>

<cond_expr>    → ( <term> <term> <comp_op> )

<comp_op>      → ==
               | !=
               | <
               | >
               | <=
               | >=

<for_expr>     → FOR ( <term> <term> ) <expression>